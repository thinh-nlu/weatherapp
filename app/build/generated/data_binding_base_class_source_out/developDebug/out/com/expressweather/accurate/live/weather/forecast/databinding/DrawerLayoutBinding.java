// Generated by view binder compiler. Do not edit!
package com.expressweather.accurate.live.weather.forecast.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.expressweather.accurate.live.weather.forecast.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DrawerLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imgApp;

  @NonNull
  public final ImageView imgClose;

  @NonNull
  public final View lineSetting;

  @NonNull
  public final ListView lvGeneral;

  @NonNull
  public final ListView lvSetting;

  @NonNull
  public final TextView tvAppName;

  @NonNull
  public final TextView tvGeneral;

  @NonNull
  public final TextView tvSetting;

  private DrawerLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imgApp,
      @NonNull ImageView imgClose, @NonNull View lineSetting, @NonNull ListView lvGeneral,
      @NonNull ListView lvSetting, @NonNull TextView tvAppName, @NonNull TextView tvGeneral,
      @NonNull TextView tvSetting) {
    this.rootView = rootView;
    this.imgApp = imgApp;
    this.imgClose = imgClose;
    this.lineSetting = lineSetting;
    this.lvGeneral = lvGeneral;
    this.lvSetting = lvSetting;
    this.tvAppName = tvAppName;
    this.tvGeneral = tvGeneral;
    this.tvSetting = tvSetting;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DrawerLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DrawerLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.drawer_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DrawerLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imgApp;
      ImageView imgApp = ViewBindings.findChildViewById(rootView, id);
      if (imgApp == null) {
        break missingId;
      }

      id = R.id.imgClose;
      ImageView imgClose = ViewBindings.findChildViewById(rootView, id);
      if (imgClose == null) {
        break missingId;
      }

      id = R.id.lineSetting;
      View lineSetting = ViewBindings.findChildViewById(rootView, id);
      if (lineSetting == null) {
        break missingId;
      }

      id = R.id.lvGeneral;
      ListView lvGeneral = ViewBindings.findChildViewById(rootView, id);
      if (lvGeneral == null) {
        break missingId;
      }

      id = R.id.lvSetting;
      ListView lvSetting = ViewBindings.findChildViewById(rootView, id);
      if (lvSetting == null) {
        break missingId;
      }

      id = R.id.tvAppName;
      TextView tvAppName = ViewBindings.findChildViewById(rootView, id);
      if (tvAppName == null) {
        break missingId;
      }

      id = R.id.tvGeneral;
      TextView tvGeneral = ViewBindings.findChildViewById(rootView, id);
      if (tvGeneral == null) {
        break missingId;
      }

      id = R.id.tvSetting;
      TextView tvSetting = ViewBindings.findChildViewById(rootView, id);
      if (tvSetting == null) {
        break missingId;
      }

      return new DrawerLayoutBinding((ConstraintLayout) rootView, imgApp, imgClose, lineSetting,
          lvGeneral, lvSetting, tvAppName, tvGeneral, tvSetting);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
