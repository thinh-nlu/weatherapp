// Generated by view binder compiler. Do not edit!
package com.expressweather.accurate.live.weather.forecast.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.expressweather.accurate.live.weather.forecast.R;
import com.mikhaellopez.circularprogressbar.CircularProgressBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutInforWeatherBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout clAirCondition;

  @NonNull
  public final ConstraintLayout clFeelsLike;

  @NonNull
  public final ConstraintLayout clHumidity;

  @NonNull
  public final ConstraintLayout clPressure;

  @NonNull
  public final ConstraintLayout clRainFall;

  @NonNull
  public final ConstraintLayout clSunrise;

  @NonNull
  public final ConstraintLayout clUvIndex;

  @NonNull
  public final ConstraintLayout clUvWind;

  @NonNull
  public final ConstraintLayout clVisibility;

  @NonNull
  public final ImageView imTemperature;

  @NonNull
  public final ImageView imgACProcess;

  @NonNull
  public final ImageView imgAirCondition;

  @NonNull
  public final ImageView imgDashedLineSR;

  @NonNull
  public final ImageView imgHumidity;

  @NonNull
  public final ImageView imgPointPressure;

  @NonNull
  public final ImageView imgPointSunrise;

  @NonNull
  public final ImageView imgPointUVIndex;

  @NonNull
  public final ImageView imgPressure;

  @NonNull
  public final ImageView imgRainFall;

  @NonNull
  public final ImageView imgSunRise;

  @NonNull
  public final ImageView imgSunUV;

  @NonNull
  public final ImageView imgUvSlider;

  @NonNull
  public final ImageView imgVisibility;

  @NonNull
  public final ImageView imgWind;

  @NonNull
  public final ConstraintLayout layoutPointPressure;

  @NonNull
  public final ConstraintLayout layoutPointSunrise;

  @NonNull
  public final ConstraintLayout layoutWeatherData;

  @NonNull
  public final ImageView lineAirCondition;

  @NonNull
  public final View lineTop;

  @NonNull
  public final CircularProgressBar progressPressure;

  @NonNull
  public final CircularProgressBar progressSunrise;

  @NonNull
  public final RecyclerView rvTimeWeather;

  @NonNull
  public final TextView tvACDescription;

  @NonNull
  public final TextView tvACEndValue;

  @NonNull
  public final TextView tvACModerate;

  @NonNull
  public final TextView tvACStartValue;

  @NonNull
  public final TextView tvACValue;

  @NonNull
  public final TextView tvAirCondition;

  @NonNull
  public final TextView tvDominantPollutant;

  @NonNull
  public final TextView tvDominantPollutantValue;

  @NonNull
  public final TextView tvFLDescription;

  @NonNull
  public final TextView tvFLTempValue;

  @NonNull
  public final TextView tvFeelsLike;

  @NonNull
  public final TextView tvHigh;

  @NonNull
  public final TextView tvHumidity;

  @NonNull
  public final TextView tvHumidityDescription;

  @NonNull
  public final TextView tvHumidityPercent;

  @NonNull
  public final TextView tvLow;

  @NonNull
  public final TextView tvNext10days;

  @NonNull
  public final TextView tvPressure;

  @NonNull
  public final TextView tvPressureValue;

  @NonNull
  public final TextView tvRFTime;

  @NonNull
  public final TextView tvRainFall;

  @NonNull
  public final TextView tvRainFallValue;

  @NonNull
  public final TextView tvSunRise;

  @NonNull
  public final TextView tvSunRiseTime;

  @NonNull
  public final TextView tvSunSetTime;

  @NonNull
  public final TextView tvTimeRainFall;

  @NonNull
  public final TextView tvToday;

  @NonNull
  public final TextView tvTomorrow;

  @NonNull
  public final TextView tvUSEPAAQI;

  @NonNull
  public final TextView tvUSEPAAQIValue;

  @NonNull
  public final TextView tvUVDescription;

  @NonNull
  public final TextView tvUnitPressure;

  @NonNull
  public final TextView tvUnitRainFall;

  @NonNull
  public final TextView tvUnitVisibility;

  @NonNull
  public final TextView tvUnitWS;

  @NonNull
  public final TextView tvUvIndex;

  @NonNull
  public final TextView tvUvIndexValue;

  @NonNull
  public final TextView tvVisibility;

  @NonNull
  public final TextView tvVisibilityValue;

  @NonNull
  public final TextView tvWind;

  @NonNull
  public final TextView tvWindValue;

  @NonNull
  public final View viewCenter;

  @NonNull
  public final View viewCenterPressure;

  @NonNull
  public final View viewOver;

  private LayoutInforWeatherBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout clAirCondition, @NonNull ConstraintLayout clFeelsLike,
      @NonNull ConstraintLayout clHumidity, @NonNull ConstraintLayout clPressure,
      @NonNull ConstraintLayout clRainFall, @NonNull ConstraintLayout clSunrise,
      @NonNull ConstraintLayout clUvIndex, @NonNull ConstraintLayout clUvWind,
      @NonNull ConstraintLayout clVisibility, @NonNull ImageView imTemperature,
      @NonNull ImageView imgACProcess, @NonNull ImageView imgAirCondition,
      @NonNull ImageView imgDashedLineSR, @NonNull ImageView imgHumidity,
      @NonNull ImageView imgPointPressure, @NonNull ImageView imgPointSunrise,
      @NonNull ImageView imgPointUVIndex, @NonNull ImageView imgPressure,
      @NonNull ImageView imgRainFall, @NonNull ImageView imgSunRise, @NonNull ImageView imgSunUV,
      @NonNull ImageView imgUvSlider, @NonNull ImageView imgVisibility, @NonNull ImageView imgWind,
      @NonNull ConstraintLayout layoutPointPressure, @NonNull ConstraintLayout layoutPointSunrise,
      @NonNull ConstraintLayout layoutWeatherData, @NonNull ImageView lineAirCondition,
      @NonNull View lineTop, @NonNull CircularProgressBar progressPressure,
      @NonNull CircularProgressBar progressSunrise, @NonNull RecyclerView rvTimeWeather,
      @NonNull TextView tvACDescription, @NonNull TextView tvACEndValue,
      @NonNull TextView tvACModerate, @NonNull TextView tvACStartValue, @NonNull TextView tvACValue,
      @NonNull TextView tvAirCondition, @NonNull TextView tvDominantPollutant,
      @NonNull TextView tvDominantPollutantValue, @NonNull TextView tvFLDescription,
      @NonNull TextView tvFLTempValue, @NonNull TextView tvFeelsLike, @NonNull TextView tvHigh,
      @NonNull TextView tvHumidity, @NonNull TextView tvHumidityDescription,
      @NonNull TextView tvHumidityPercent, @NonNull TextView tvLow, @NonNull TextView tvNext10days,
      @NonNull TextView tvPressure, @NonNull TextView tvPressureValue, @NonNull TextView tvRFTime,
      @NonNull TextView tvRainFall, @NonNull TextView tvRainFallValue, @NonNull TextView tvSunRise,
      @NonNull TextView tvSunRiseTime, @NonNull TextView tvSunSetTime,
      @NonNull TextView tvTimeRainFall, @NonNull TextView tvToday, @NonNull TextView tvTomorrow,
      @NonNull TextView tvUSEPAAQI, @NonNull TextView tvUSEPAAQIValue,
      @NonNull TextView tvUVDescription, @NonNull TextView tvUnitPressure,
      @NonNull TextView tvUnitRainFall, @NonNull TextView tvUnitVisibility,
      @NonNull TextView tvUnitWS, @NonNull TextView tvUvIndex, @NonNull TextView tvUvIndexValue,
      @NonNull TextView tvVisibility, @NonNull TextView tvVisibilityValue, @NonNull TextView tvWind,
      @NonNull TextView tvWindValue, @NonNull View viewCenter, @NonNull View viewCenterPressure,
      @NonNull View viewOver) {
    this.rootView = rootView;
    this.clAirCondition = clAirCondition;
    this.clFeelsLike = clFeelsLike;
    this.clHumidity = clHumidity;
    this.clPressure = clPressure;
    this.clRainFall = clRainFall;
    this.clSunrise = clSunrise;
    this.clUvIndex = clUvIndex;
    this.clUvWind = clUvWind;
    this.clVisibility = clVisibility;
    this.imTemperature = imTemperature;
    this.imgACProcess = imgACProcess;
    this.imgAirCondition = imgAirCondition;
    this.imgDashedLineSR = imgDashedLineSR;
    this.imgHumidity = imgHumidity;
    this.imgPointPressure = imgPointPressure;
    this.imgPointSunrise = imgPointSunrise;
    this.imgPointUVIndex = imgPointUVIndex;
    this.imgPressure = imgPressure;
    this.imgRainFall = imgRainFall;
    this.imgSunRise = imgSunRise;
    this.imgSunUV = imgSunUV;
    this.imgUvSlider = imgUvSlider;
    this.imgVisibility = imgVisibility;
    this.imgWind = imgWind;
    this.layoutPointPressure = layoutPointPressure;
    this.layoutPointSunrise = layoutPointSunrise;
    this.layoutWeatherData = layoutWeatherData;
    this.lineAirCondition = lineAirCondition;
    this.lineTop = lineTop;
    this.progressPressure = progressPressure;
    this.progressSunrise = progressSunrise;
    this.rvTimeWeather = rvTimeWeather;
    this.tvACDescription = tvACDescription;
    this.tvACEndValue = tvACEndValue;
    this.tvACModerate = tvACModerate;
    this.tvACStartValue = tvACStartValue;
    this.tvACValue = tvACValue;
    this.tvAirCondition = tvAirCondition;
    this.tvDominantPollutant = tvDominantPollutant;
    this.tvDominantPollutantValue = tvDominantPollutantValue;
    this.tvFLDescription = tvFLDescription;
    this.tvFLTempValue = tvFLTempValue;
    this.tvFeelsLike = tvFeelsLike;
    this.tvHigh = tvHigh;
    this.tvHumidity = tvHumidity;
    this.tvHumidityDescription = tvHumidityDescription;
    this.tvHumidityPercent = tvHumidityPercent;
    this.tvLow = tvLow;
    this.tvNext10days = tvNext10days;
    this.tvPressure = tvPressure;
    this.tvPressureValue = tvPressureValue;
    this.tvRFTime = tvRFTime;
    this.tvRainFall = tvRainFall;
    this.tvRainFallValue = tvRainFallValue;
    this.tvSunRise = tvSunRise;
    this.tvSunRiseTime = tvSunRiseTime;
    this.tvSunSetTime = tvSunSetTime;
    this.tvTimeRainFall = tvTimeRainFall;
    this.tvToday = tvToday;
    this.tvTomorrow = tvTomorrow;
    this.tvUSEPAAQI = tvUSEPAAQI;
    this.tvUSEPAAQIValue = tvUSEPAAQIValue;
    this.tvUVDescription = tvUVDescription;
    this.tvUnitPressure = tvUnitPressure;
    this.tvUnitRainFall = tvUnitRainFall;
    this.tvUnitVisibility = tvUnitVisibility;
    this.tvUnitWS = tvUnitWS;
    this.tvUvIndex = tvUvIndex;
    this.tvUvIndexValue = tvUvIndexValue;
    this.tvVisibility = tvVisibility;
    this.tvVisibilityValue = tvVisibilityValue;
    this.tvWind = tvWind;
    this.tvWindValue = tvWindValue;
    this.viewCenter = viewCenter;
    this.viewCenterPressure = viewCenterPressure;
    this.viewOver = viewOver;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutInforWeatherBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutInforWeatherBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_infor_weather, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutInforWeatherBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clAirCondition;
      ConstraintLayout clAirCondition = ViewBindings.findChildViewById(rootView, id);
      if (clAirCondition == null) {
        break missingId;
      }

      id = R.id.clFeelsLike;
      ConstraintLayout clFeelsLike = ViewBindings.findChildViewById(rootView, id);
      if (clFeelsLike == null) {
        break missingId;
      }

      id = R.id.clHumidity;
      ConstraintLayout clHumidity = ViewBindings.findChildViewById(rootView, id);
      if (clHumidity == null) {
        break missingId;
      }

      id = R.id.clPressure;
      ConstraintLayout clPressure = ViewBindings.findChildViewById(rootView, id);
      if (clPressure == null) {
        break missingId;
      }

      id = R.id.clRainFall;
      ConstraintLayout clRainFall = ViewBindings.findChildViewById(rootView, id);
      if (clRainFall == null) {
        break missingId;
      }

      id = R.id.clSunrise;
      ConstraintLayout clSunrise = ViewBindings.findChildViewById(rootView, id);
      if (clSunrise == null) {
        break missingId;
      }

      id = R.id.clUvIndex;
      ConstraintLayout clUvIndex = ViewBindings.findChildViewById(rootView, id);
      if (clUvIndex == null) {
        break missingId;
      }

      id = R.id.clUvWind;
      ConstraintLayout clUvWind = ViewBindings.findChildViewById(rootView, id);
      if (clUvWind == null) {
        break missingId;
      }

      id = R.id.clVisibility;
      ConstraintLayout clVisibility = ViewBindings.findChildViewById(rootView, id);
      if (clVisibility == null) {
        break missingId;
      }

      id = R.id.imTemperature;
      ImageView imTemperature = ViewBindings.findChildViewById(rootView, id);
      if (imTemperature == null) {
        break missingId;
      }

      id = R.id.imgACProcess;
      ImageView imgACProcess = ViewBindings.findChildViewById(rootView, id);
      if (imgACProcess == null) {
        break missingId;
      }

      id = R.id.imgAirCondition;
      ImageView imgAirCondition = ViewBindings.findChildViewById(rootView, id);
      if (imgAirCondition == null) {
        break missingId;
      }

      id = R.id.imgDashedLineSR;
      ImageView imgDashedLineSR = ViewBindings.findChildViewById(rootView, id);
      if (imgDashedLineSR == null) {
        break missingId;
      }

      id = R.id.imgHumidity;
      ImageView imgHumidity = ViewBindings.findChildViewById(rootView, id);
      if (imgHumidity == null) {
        break missingId;
      }

      id = R.id.imgPointPressure;
      ImageView imgPointPressure = ViewBindings.findChildViewById(rootView, id);
      if (imgPointPressure == null) {
        break missingId;
      }

      id = R.id.imgPointSunrise;
      ImageView imgPointSunrise = ViewBindings.findChildViewById(rootView, id);
      if (imgPointSunrise == null) {
        break missingId;
      }

      id = R.id.imgPointUVIndex;
      ImageView imgPointUVIndex = ViewBindings.findChildViewById(rootView, id);
      if (imgPointUVIndex == null) {
        break missingId;
      }

      id = R.id.imgPressure;
      ImageView imgPressure = ViewBindings.findChildViewById(rootView, id);
      if (imgPressure == null) {
        break missingId;
      }

      id = R.id.imgRainFall;
      ImageView imgRainFall = ViewBindings.findChildViewById(rootView, id);
      if (imgRainFall == null) {
        break missingId;
      }

      id = R.id.imgSunRise;
      ImageView imgSunRise = ViewBindings.findChildViewById(rootView, id);
      if (imgSunRise == null) {
        break missingId;
      }

      id = R.id.imgSunUV;
      ImageView imgSunUV = ViewBindings.findChildViewById(rootView, id);
      if (imgSunUV == null) {
        break missingId;
      }

      id = R.id.imgUvSlider;
      ImageView imgUvSlider = ViewBindings.findChildViewById(rootView, id);
      if (imgUvSlider == null) {
        break missingId;
      }

      id = R.id.imgVisibility;
      ImageView imgVisibility = ViewBindings.findChildViewById(rootView, id);
      if (imgVisibility == null) {
        break missingId;
      }

      id = R.id.imgWind;
      ImageView imgWind = ViewBindings.findChildViewById(rootView, id);
      if (imgWind == null) {
        break missingId;
      }

      id = R.id.layoutPointPressure;
      ConstraintLayout layoutPointPressure = ViewBindings.findChildViewById(rootView, id);
      if (layoutPointPressure == null) {
        break missingId;
      }

      id = R.id.layoutPointSunrise;
      ConstraintLayout layoutPointSunrise = ViewBindings.findChildViewById(rootView, id);
      if (layoutPointSunrise == null) {
        break missingId;
      }

      ConstraintLayout layoutWeatherData = (ConstraintLayout) rootView;

      id = R.id.lineAirCondition;
      ImageView lineAirCondition = ViewBindings.findChildViewById(rootView, id);
      if (lineAirCondition == null) {
        break missingId;
      }

      id = R.id.lineTop;
      View lineTop = ViewBindings.findChildViewById(rootView, id);
      if (lineTop == null) {
        break missingId;
      }

      id = R.id.progressPressure;
      CircularProgressBar progressPressure = ViewBindings.findChildViewById(rootView, id);
      if (progressPressure == null) {
        break missingId;
      }

      id = R.id.progressSunrise;
      CircularProgressBar progressSunrise = ViewBindings.findChildViewById(rootView, id);
      if (progressSunrise == null) {
        break missingId;
      }

      id = R.id.rvTimeWeather;
      RecyclerView rvTimeWeather = ViewBindings.findChildViewById(rootView, id);
      if (rvTimeWeather == null) {
        break missingId;
      }

      id = R.id.tvACDescription;
      TextView tvACDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvACDescription == null) {
        break missingId;
      }

      id = R.id.tvACEndValue;
      TextView tvACEndValue = ViewBindings.findChildViewById(rootView, id);
      if (tvACEndValue == null) {
        break missingId;
      }

      id = R.id.tvACModerate;
      TextView tvACModerate = ViewBindings.findChildViewById(rootView, id);
      if (tvACModerate == null) {
        break missingId;
      }

      id = R.id.tvACStartValue;
      TextView tvACStartValue = ViewBindings.findChildViewById(rootView, id);
      if (tvACStartValue == null) {
        break missingId;
      }

      id = R.id.tvACValue;
      TextView tvACValue = ViewBindings.findChildViewById(rootView, id);
      if (tvACValue == null) {
        break missingId;
      }

      id = R.id.tvAirCondition;
      TextView tvAirCondition = ViewBindings.findChildViewById(rootView, id);
      if (tvAirCondition == null) {
        break missingId;
      }

      id = R.id.tvDominantPollutant;
      TextView tvDominantPollutant = ViewBindings.findChildViewById(rootView, id);
      if (tvDominantPollutant == null) {
        break missingId;
      }

      id = R.id.tvDominantPollutantValue;
      TextView tvDominantPollutantValue = ViewBindings.findChildViewById(rootView, id);
      if (tvDominantPollutantValue == null) {
        break missingId;
      }

      id = R.id.tvFLDescription;
      TextView tvFLDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvFLDescription == null) {
        break missingId;
      }

      id = R.id.tvFLTempValue;
      TextView tvFLTempValue = ViewBindings.findChildViewById(rootView, id);
      if (tvFLTempValue == null) {
        break missingId;
      }

      id = R.id.tvFeelsLike;
      TextView tvFeelsLike = ViewBindings.findChildViewById(rootView, id);
      if (tvFeelsLike == null) {
        break missingId;
      }

      id = R.id.tvHigh;
      TextView tvHigh = ViewBindings.findChildViewById(rootView, id);
      if (tvHigh == null) {
        break missingId;
      }

      id = R.id.tvHumidity;
      TextView tvHumidity = ViewBindings.findChildViewById(rootView, id);
      if (tvHumidity == null) {
        break missingId;
      }

      id = R.id.tvHumidityDescription;
      TextView tvHumidityDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvHumidityDescription == null) {
        break missingId;
      }

      id = R.id.tvHumidityPercent;
      TextView tvHumidityPercent = ViewBindings.findChildViewById(rootView, id);
      if (tvHumidityPercent == null) {
        break missingId;
      }

      id = R.id.tvLow;
      TextView tvLow = ViewBindings.findChildViewById(rootView, id);
      if (tvLow == null) {
        break missingId;
      }

      id = R.id.tvNext10days;
      TextView tvNext10days = ViewBindings.findChildViewById(rootView, id);
      if (tvNext10days == null) {
        break missingId;
      }

      id = R.id.tvPressure;
      TextView tvPressure = ViewBindings.findChildViewById(rootView, id);
      if (tvPressure == null) {
        break missingId;
      }

      id = R.id.tvPressureValue;
      TextView tvPressureValue = ViewBindings.findChildViewById(rootView, id);
      if (tvPressureValue == null) {
        break missingId;
      }

      id = R.id.tvRFTime;
      TextView tvRFTime = ViewBindings.findChildViewById(rootView, id);
      if (tvRFTime == null) {
        break missingId;
      }

      id = R.id.tvRainFall;
      TextView tvRainFall = ViewBindings.findChildViewById(rootView, id);
      if (tvRainFall == null) {
        break missingId;
      }

      id = R.id.tvRainFallValue;
      TextView tvRainFallValue = ViewBindings.findChildViewById(rootView, id);
      if (tvRainFallValue == null) {
        break missingId;
      }

      id = R.id.tvSunRise;
      TextView tvSunRise = ViewBindings.findChildViewById(rootView, id);
      if (tvSunRise == null) {
        break missingId;
      }

      id = R.id.tvSunRiseTime;
      TextView tvSunRiseTime = ViewBindings.findChildViewById(rootView, id);
      if (tvSunRiseTime == null) {
        break missingId;
      }

      id = R.id.tvSunSetTime;
      TextView tvSunSetTime = ViewBindings.findChildViewById(rootView, id);
      if (tvSunSetTime == null) {
        break missingId;
      }

      id = R.id.tvTimeRainFall;
      TextView tvTimeRainFall = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeRainFall == null) {
        break missingId;
      }

      id = R.id.tvToday;
      TextView tvToday = ViewBindings.findChildViewById(rootView, id);
      if (tvToday == null) {
        break missingId;
      }

      id = R.id.tvTomorrow;
      TextView tvTomorrow = ViewBindings.findChildViewById(rootView, id);
      if (tvTomorrow == null) {
        break missingId;
      }

      id = R.id.tv_US_EPA_AQI;
      TextView tvUSEPAAQI = ViewBindings.findChildViewById(rootView, id);
      if (tvUSEPAAQI == null) {
        break missingId;
      }

      id = R.id.tv_US_EPA_AQI_value;
      TextView tvUSEPAAQIValue = ViewBindings.findChildViewById(rootView, id);
      if (tvUSEPAAQIValue == null) {
        break missingId;
      }

      id = R.id.tvUVDescription;
      TextView tvUVDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvUVDescription == null) {
        break missingId;
      }

      id = R.id.tvUnitPressure;
      TextView tvUnitPressure = ViewBindings.findChildViewById(rootView, id);
      if (tvUnitPressure == null) {
        break missingId;
      }

      id = R.id.tvUnitRainFall;
      TextView tvUnitRainFall = ViewBindings.findChildViewById(rootView, id);
      if (tvUnitRainFall == null) {
        break missingId;
      }

      id = R.id.tvUnitVisibility;
      TextView tvUnitVisibility = ViewBindings.findChildViewById(rootView, id);
      if (tvUnitVisibility == null) {
        break missingId;
      }

      id = R.id.tvUnitWS;
      TextView tvUnitWS = ViewBindings.findChildViewById(rootView, id);
      if (tvUnitWS == null) {
        break missingId;
      }

      id = R.id.tvUvIndex;
      TextView tvUvIndex = ViewBindings.findChildViewById(rootView, id);
      if (tvUvIndex == null) {
        break missingId;
      }

      id = R.id.tvUvIndexValue;
      TextView tvUvIndexValue = ViewBindings.findChildViewById(rootView, id);
      if (tvUvIndexValue == null) {
        break missingId;
      }

      id = R.id.tvVisibility;
      TextView tvVisibility = ViewBindings.findChildViewById(rootView, id);
      if (tvVisibility == null) {
        break missingId;
      }

      id = R.id.tvVisibilityValue;
      TextView tvVisibilityValue = ViewBindings.findChildViewById(rootView, id);
      if (tvVisibilityValue == null) {
        break missingId;
      }

      id = R.id.tvWind;
      TextView tvWind = ViewBindings.findChildViewById(rootView, id);
      if (tvWind == null) {
        break missingId;
      }

      id = R.id.tvWindValue;
      TextView tvWindValue = ViewBindings.findChildViewById(rootView, id);
      if (tvWindValue == null) {
        break missingId;
      }

      id = R.id.viewCenter;
      View viewCenter = ViewBindings.findChildViewById(rootView, id);
      if (viewCenter == null) {
        break missingId;
      }

      id = R.id.viewCenterPressure;
      View viewCenterPressure = ViewBindings.findChildViewById(rootView, id);
      if (viewCenterPressure == null) {
        break missingId;
      }

      id = R.id.viewOver;
      View viewOver = ViewBindings.findChildViewById(rootView, id);
      if (viewOver == null) {
        break missingId;
      }

      return new LayoutInforWeatherBinding((ConstraintLayout) rootView, clAirCondition, clFeelsLike,
          clHumidity, clPressure, clRainFall, clSunrise, clUvIndex, clUvWind, clVisibility,
          imTemperature, imgACProcess, imgAirCondition, imgDashedLineSR, imgHumidity,
          imgPointPressure, imgPointSunrise, imgPointUVIndex, imgPressure, imgRainFall, imgSunRise,
          imgSunUV, imgUvSlider, imgVisibility, imgWind, layoutPointPressure, layoutPointSunrise,
          layoutWeatherData, lineAirCondition, lineTop, progressPressure, progressSunrise,
          rvTimeWeather, tvACDescription, tvACEndValue, tvACModerate, tvACStartValue, tvACValue,
          tvAirCondition, tvDominantPollutant, tvDominantPollutantValue, tvFLDescription,
          tvFLTempValue, tvFeelsLike, tvHigh, tvHumidity, tvHumidityDescription, tvHumidityPercent,
          tvLow, tvNext10days, tvPressure, tvPressureValue, tvRFTime, tvRainFall, tvRainFallValue,
          tvSunRise, tvSunRiseTime, tvSunSetTime, tvTimeRainFall, tvToday, tvTomorrow, tvUSEPAAQI,
          tvUSEPAAQIValue, tvUVDescription, tvUnitPressure, tvUnitRainFall, tvUnitVisibility,
          tvUnitWS, tvUvIndex, tvUvIndexValue, tvVisibility, tvVisibilityValue, tvWind, tvWindValue,
          viewCenter, viewCenterPressure, viewOver);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
